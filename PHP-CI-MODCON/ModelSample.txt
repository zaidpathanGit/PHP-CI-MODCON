<?php
/**
 * Code to generate class.
 */
class *ModelName* extends CI_Model
{
   /**
    * Code to generate constructor.
    */
   public function __construct() {
    
      /**
       * Code to load database when the constructor is called.
       */
      parent::__construct(); 
      $this->load->database();         
   }
  
   /**
    * Method to perform insert operation.
    */
   public function insertInto*MethodName*(*InsertParameter*)
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $response = Array('response'=>$this->db->insert('*QueryName*', Array(*InsertArrayParameter*)
                          ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
    * Method to perform update operation.
    */
   public function updateInto*MethodName*(*UpdateParameter*)
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $this->db->where('*PrimaryKey*',*DeleteParameter*);
        $response = Array('response'=>$this->db->update('*QueryName*', Array(*UpdateArrayParameter*)
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
    * Method to perform delete operation.
    */
   public function deleteInto*MethodName*(*DeleteParameter*)
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $this->db->where('*PrimaryKey*',*DeleteParameter*);
        $response = Array('response'=>$this->db->delete('*QueryName*')
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
    * Method to display all data from table.
    */
   public function showAllDataFrom*MethodName*()
   {
       /**
        * Code to execute DB builder query and return the output into json format.
        */
        $response = Array('response'=>$this->db->get('*QueryName*')->result_array()
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
   * Method to display all data from table with select functionality.
   */
   public function showAllDataFrom*MethodName*Select($selectionArray)
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $this->db->select($selectionArray);
        $response = Array('response'=>$this->db->get('*QueryName*')->result_array()
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
   * Method to display all data from table with limit functionality.
   */
   public function showAllDataFrom*MethodName*Limit($start, $end)
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $response = Array('response'=>$this->db->get('*QueryName*',$end, $start)->result_array()
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
   * Method to display all data from table with select and limit functionality.
   */
   public function showAllDataFrom*MethodName*SelectLimit($selectionArray, $start, $end)
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $this->db->select($selectionArray);
        $response = Array('response'=>$this->db->get('*QueryName*',$end, $start)->result_array()
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
   * Method to display maximum value of a specified field from table.
   */
   public function showAllDataFrom*MethodName*Max($field)
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $this->db->select_max($field);
        $response = Array('response'=>$this->db->get('*QueryName*')->result_array()
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
   * Method to display minimum value of a specified field from table.
   */
   public function showAllDataFrom*MethodName*Min($field)
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $this->db->select_min($field);
        $response = Array('response'=>$this->db->get('*QueryName*')->result_array()
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
   * Method to display average value of a specified field from table.
   */
   public function showAllDataFrom*MethodName*Avg($field)
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $this->db->select_avg($field);
        $response = Array('response'=>$this->db->get('*QueryName*')->result_array()
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
   * Method to display sum value of a specified field from table.
   */
   public function showAllDataFrom*MethodName*Sum($field)
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $this->db->select_sum($field);
        $response = Array('response'=>$this->db->get('*QueryName*')->result_array()
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
   * Method to display data from table with where clause.
   */
   public function showAllDataFrom*MethodName*Where($conditionArray)
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $this->db->where($conditionArray);
        $response = Array('response'=>$this->db->get('*QueryName*')->result_array()
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
   * Method to display data from table with where and like clause.
   */
   public function showAllDataFrom*MethodName*WhereLike($conditionArray)
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $this->db->like($conditionArray);
        $response = Array('response'=>$this->db->get('*QueryName*')->result_array()
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
   * Method to display data from table with where and not like clause.
   */
   public function showAllDataFrom*MethodName*WhereNLike($conditionArray)
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $this->db->not_like($conditionArray);
        $response = Array('response'=>$this->db->get('*QueryName*')->result_array()
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
   * Method to display data from table with group by functionality.
   */
   public function showAllDataFrom*MethodName*GroupBy($fields)
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $this->db->group_by($fields);
        $response = Array('response'=>$this->db->get('*QueryName*')->result_array()
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
   * Method to display data from table with order by functionality.
   */
   public function showAllDataFrom*MethodName*OrderBy($fields, $order)
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $this->db->order_by($fields, $order);
        $response = Array('response'=>$this->db->get('*QueryName*')->result_array()
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }

   /**
   * Method to display distinct data from table.
   */
   public function showAllDataFrom*MethodName*Distinct()
   {
        /**
        * Code to execute DB builder query and return the output into json format.
        */
        $this->db->distinct();
        $response = Array('response'=>$this->db->get('*QueryName*')->result_array()
                         ,'affected'=>$this->db->affected_rows());
        return json_encode([$response]);
   }
}

?>